//Majority Element - GFG (https://practice.geeksforgeeks.org/problems/majority-element-1587115620/1#)

//Given an array A of N elements. Find the majority element in the array. A majority element in an array A of size N is an element that appears more than N/2 times in the array.

/*

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

*/


//IP/OP EXAMPLES
/*

  1.  I/P: N = 3 
      A[] = {1,2,3}

      O/P: -1

      Explanation: Since, each element in {1,2,3} appears only once so there is no majority element.
    
  2.  I/P: N = 5
      A[] = {3, 1, 3, 3, 2}

      O/P: 3

      Explanation: Since, 3 is present more than N/2 times, so it is the majority element.

*/


//MY APPROACH:-
/*

	1. Simply use 2 'for-loops' and then compare each element of the array with all the elements of the array and then count their occurences in the whole array. 
    2. The moment the count becomes greater than size/2 retun the element.
    3. Else return -1 due to the unavailability of the element in the array.

*/

//TIME COMPLEXITY FOR THIS APPROACH:- O(N^2)

//CODE:- 

int majorityElement(int a[], int size)
{
    int count = 0;
    for(int i = 0; i < size; i++) {
        for(int j = 0; j < size; j++)
            if(a[i] == a[j])
                count++;
        if(count > size/2)
            return a[i];
        count = 0;
    }
    return -1;
}